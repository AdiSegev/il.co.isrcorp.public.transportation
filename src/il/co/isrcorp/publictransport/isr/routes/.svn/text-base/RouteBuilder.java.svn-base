package com.example.publictransport.isr.routes;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import navigation.MyApplication;

import kml.ParsingStructure;
import kml.SAXXMLParser;
import android.app.Activity;
import android.app.Dialog;
import android.os.AsyncTask;
import android.widget.ProgressBar;

import com.sygic.sdk.api.ApiItinerary;
import com.sygic.sdk.api.exception.GeneralException;
import com.sygic.sdk.api.model.StopOffPoint;

public class RouteBuilder {

	public Activity mActivity;
	
	public RouteBuilder(Activity activity){
		mActivity = activity;
	}
	
	public void buildRoute(){
		ArrayList<StopOffPoint> list = new ArrayList<StopOffPoint>();
    	ArrayList<ParsingStructure> stationsList = new ArrayList<ParsingStructure>();
    	String [] result = getRouteCoordinates();
    	
    	if(result == null){
    		return;
    	}
    	
    	 int i = 0;
    	 int x = 0;
    	 int y = 0;
    	 
    	 for(i = 0; i<result.length;i++){
    		
    		try{ 
    		x = (int)((Double.valueOf(result[i].split(",")[0].trim()))*100000);
    		y = (int)((Double.valueOf(result[i].split(",")[1].trim()))*100000);
    		
    		}
    		catch(NumberFormatException exception){
    			System.out.println("skipped coordinate "+ i);
    			continue;
    		}
    		list.add(new StopOffPoint(false, false, StopOffPoint.PointType.START, x,y, -1, 0, "", "start", ""));
    		break;
    		}
//    		stopOffPoint = new StopOffPoint(false, false, 1, x, y,i, i, "ISR", "Itinerary: "+i , "");
    	         	 
    	 while(i<result.length/2){
     		
     		try{ 
     		x = (int)((Double.valueOf(result[i].split(",")[0].trim()))*100000);
     		y = (int)((Double.valueOf(result[i].split(",")[1].trim()))*100000);
     		
     		}
     		catch(NumberFormatException exception){
     			System.out.println("skipped coordinate "+ i+" time "+System.currentTimeMillis());
     			continue;
     		}
     		list.add(new StopOffPoint(false, false, StopOffPoint.PointType.INVISIBLE, x,y, -1, 0, "", "coord"+i, ""));
//     		list.add(new StopOffPoint(false, false, StopOffPoint.PointType.START, x,y, -1, 0, "", "start", ""));
     		i++;
     		}
       
//        list.add(new StopOffPoint(false, false, StopOffPoint.PointType.START, (int)(35.18742*100000)+i,(int)(31.79419*100000)+i, -1, 0, "", "ba", ""));
        
        
//        for (i = 2;i<350;i++){
//        	list.add(new StopOffPoint(false, false, StopOffPoint.PointType.VIAPOINT, (int)(35.18742*100000)+i,(int)(31.79419*100000)+i, -1, 0, "", "trnava"+i, ""));	
//        }
//        list.add(new StopOffPoint(false, false, StopOffPoint.PointType.FINISH, 1759511, 4837351, -1, 0, "", "trnava2", ""));
        try {
            ApiItinerary.addItinerary(list, "test4", MyApplication.API_CALL_TIMEOUT);
            System.out.println("num of Itineraries:"+ ApiItinerary.getItineraryList("test4", MyApplication.API_CALL_TIMEOUT).size());
//            populateSpinner();
        } catch (GeneralException e) {
            e.printStackTrace();
        }
        
        while (i<result.length-2){
        	try{ 
         		x = (int)((Double.valueOf(result[i].split(",")[0].trim()))*100000);
         		y = (int)((Double.valueOf(result[i].split(",")[1].trim()))*100000);
         		
         		}
         		catch(NumberFormatException exception){
         			System.out.println("skipped coordinate "+ i);
         			continue;
         		}
        	list.add(new StopOffPoint(false, false, StopOffPoint.PointType.INVISIBLE, x,y, -1, 0, "", "coord"+i, ""));
        	i++;
        }
        x = (int)((Double.valueOf(result[i].split(",")[0].trim()))*100000);
 		y = (int)((Double.valueOf(result[i].split(",")[1].trim()))*100000);
 		
        list.add(new StopOffPoint(false, false, StopOffPoint.PointType.FINISH, x, y, -1, 0, "", "trnava2", ""));
        try {
            ApiItinerary.addItinerary(list, "test4", MyApplication.API_CALL_TIMEOUT);
            System.out.println("num of Itineraries:"+ ApiItinerary.getItineraryList("test4", MyApplication.API_CALL_TIMEOUT).size());
        } catch (GeneralException e) {
            e.printStackTrace();
        }
        
        if (result != null){
        	stationsList = getRouteStations();
        	
        	
        	for(int j = 0; j<stationsList.size();j++){
        		 x = (int)((Double.valueOf(stationsList.get(j).getCoordinates().split(",")[0].trim()))*100000);
          		 y = (int)((Double.valueOf(stationsList.get(j).getCoordinates().split(",")[1].trim()))*100000);
          		 
          		list.add(new StopOffPoint(false, false, StopOffPoint.PointType.VIAPOINT, x,y, -1, 0, "", "coord"+i, ""));
        	}
        	
        	  try {
                  ApiItinerary.addItinerary(list, "test4", MyApplication.API_CALL_TIMEOUT);
                  System.out.println("num of Itineraries:"+ ApiItinerary.getItineraryList("test4", MyApplication.API_CALL_TIMEOUT).size());
              } catch (GeneralException e) {
                  e.printStackTrace();
              }
        }
	}
	
	 public static List<ParsingStructure> parsingStr = null;
		
	    private String [] getRouteCoordinates() {
			 ParsingBigFileAsync parsingAsync = new ParsingBigFileAsync();
	         parsingAsync.execute();
	         
	         if(parsingStr!= null){
	        	 
	        	 String [] coordinatesArray = parsingStr.get(0).getCoordinates().split("\n");
	        	 buildRoute(coordinatesArray);
	         }
			return null;
			
		}
	    
	    private void buildRoute(String[] coordinatesArray) {
	    	ArrayList<StopOffPoint> list = new ArrayList<StopOffPoint>();
	    	ArrayList<ParsingStructure> stationsList = new ArrayList<ParsingStructure>();
	   	 
	    	int i = 0;
	   	 	int x = 0;
	   	 	int y = 0;
	   	 
	   	 for(i = 0; i<coordinatesArray.length;i++){
	   		
	   		try{ 
	   		x = (int)((Double.valueOf(coordinatesArray[i].split(",")[0].trim()))*100000);
	   		y = (int)((Double.valueOf(coordinatesArray[i].split(",")[1].trim()))*100000);
	   		
	   		}
	   		catch(NumberFormatException exception){
	   			System.out.println("skipped coordinate "+ i);
	   			continue;
	   		}
	   		list.add(new StopOffPoint(false, false, StopOffPoint.PointType.START, x,y, -1, 0, "", "start", ""));
	   		break;
	   		}
	   	         	 
	   	 while(i<coordinatesArray.length/2){
	    		
	    		try{ 
	    		x = (int)((Double.valueOf(coordinatesArray[i].split(",")[0].trim()))*100000);
	    		y = (int)((Double.valueOf(coordinatesArray[i].split(",")[1].trim()))*100000);
	    		
	    		}
	    		catch(NumberFormatException exception){
	    			System.out.println("skipped coordinate "+ i);
	    			continue;
	    		}
	    		list.add(new StopOffPoint(false, false, StopOffPoint.PointType.INVISIBLE, x,y, -1, 0, "", "coord"+i, ""));
	    		i++;
	    		}
	      
//	       list.add(new StopOffPoint(false, false, StopOffPoint.PointType.START, (int)(35.18742*100000)+i,(int)(31.79419*100000)+i, -1, 0, "", "ba", ""));
	       
	       
//	       for (i = 2;i<350;i++){
//	       	list.add(new StopOffPoint(false, false, StopOffPoint.PointType.VIAPOINT, (int)(35.18742*100000)+i,(int)(31.79419*100000)+i, -1, 0, "", "trnava"+i, ""));	
//	       }
//	       list.add(new StopOffPoint(false, false, StopOffPoint.PointType.FINISH, 1759511, 4837351, -1, 0, "", "trnava2", ""));
	       try {
	           ApiItinerary.addItinerary(list, "test4", MyApplication.API_CALL_TIMEOUT);
	       } catch (GeneralException e) {
	           e.printStackTrace();
	       }
	       
	       while (i<coordinatesArray.length-2){
	       	try{ 
	        		x = (int)((Double.valueOf(coordinatesArray[i].split(",")[0].trim()))*100000);
	        		y = (int)((Double.valueOf(coordinatesArray[i].split(",")[1].trim()))*100000);
	        		
	        		}
	        		catch(NumberFormatException exception){
	        			System.out.println("skipped coordinate "+ i);
	        			continue;
	        		}
	       	list.add(new StopOffPoint(false, false, StopOffPoint.PointType.INVISIBLE, x,y, -1, 0, "", "coord"+i, ""));
	       	i++;
	       }
	       
	       if (coordinatesArray != null){
	       	stationsList = getRouteStations();
	       	
	       	for(int j = 0; j<stationsList.size();j++){
	       		 x = (int)((Double.valueOf(stationsList.get(j).getCoordinates().split(",")[0].trim()))*100000);
	         		 y = (int)((Double.valueOf(stationsList.get(j).getCoordinates().split(",")[1].trim()))*100000);
	         		
	         		list.add(new StopOffPoint(false, false, StopOffPoint.PointType.VIAPOINT, x,y, -1, 0, "", "stop"+j+1, ""));
	       	}
	       	
	       	  try {
	                 ApiItinerary.addItinerary(list, "test4", MyApplication.API_CALL_TIMEOUT);
	                 System.out.println("add itinerary points num of Itineraries:"+ ApiItinerary.getItineraryList("test4", MyApplication.API_CALL_TIMEOUT).size()+" "+System.currentTimeMillis());
	             } catch (GeneralException e) {
	                 e.printStackTrace();
	             }
	       	  
	        x = (int)((Double.valueOf(coordinatesArray[i].split(",")[0].trim()))*100000);
	  		y = (int)((Double.valueOf(coordinatesArray[i].split(",")[1].trim()))*100000);
	  		
	         list.add(new StopOffPoint(false, false, StopOffPoint.PointType.FINISH, x, y, -1, 0, "", "end", ""));
	         try {
	             ApiItinerary.addItinerary(list, "test4", MyApplication.API_CALL_TIMEOUT);
	             System.out.println("add itinerary num of Itineraries:"+ ApiItinerary.getItineraryList("test4", MyApplication.API_CALL_TIMEOUT).size()+" "+System.currentTimeMillis());
//	             populateSpinner();
	         } catch (GeneralException e) {
	             e.printStackTrace();
	         }
	       }
	       
	       
	   }
			

		private ArrayList<ParsingStructure> getRouteStations() {
	    	ArrayList <ParsingStructure> result = new ArrayList<ParsingStructure>();
	    	if (parsingStr != null){
			
	    		for(int i = 0; i<parsingStr.size();i++){
	    			if(parsingStr.get(i).isStation()){
	    				result.add(parsingStr.get(i));
	    			}
	    		}
	    		
	    		return result;
	    	}
			return null;
		}
		   public class ParsingBigFileAsync extends AsyncTask<String, Void , List<ParsingStructure>>{
			   String  result;
			   Dialog dialog;
			   ProgressBar pBar ;
			          @Override
			          public void onPreExecute(){
			          }
			          @Override
			          protected List<ParsingStructure> doInBackground(String... params) {
			                 try {
			                       parsingStr = SAXXMLParser.parse(mActivity.getAssets().open("routeAndStops.kml"));
			                       System.out.println("add itinerary after parse "+System.currentTimeMillis());
			                          result = "in";
			                      } catch (IOException e) {
			                            e.printStackTrace();
			                            parsingStr = null;
			                      }
			                     
			                return parsingStr;
			          }
			         
			          @Override
			          public void onPostExecute(List<ParsingStructure> result){
			                if(result != null){
			                   
			                	
			                	for(int i = 0; i<result.size();i++){
			                		System.out.println("point "+i+" coordinates :"+result.get(i).getCoordinates());
			                	}
			                	
			                }
			          }
			         
			    }	
}
